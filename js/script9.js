// Завдання 1

// "Порівняння кількох промісів"

// Ви маєте набір функцій, які повертають проміси з випадковими затримками. Ваше завдання — виконати всі проміси одночасно за допомогою Promise.all і обробити результати.

// Створіть функцію delayedPromise, яка приймає значення і затримку (у мілісекундах) і повертає проміс, який вирішується з заданим значенням після затримки.
// Створіть масив з 5 промісів, використовуючи функцію delayedPromise, із різними значеннями та затримками.
// Використайте Promise.all, щоб одночасно виконати всі проміси з масиву.
// Обробіть результати вирішення промісів та виведіть їх у консоль.

const delayedPromise = (ms) => {
    return new Promise(() => {
        setTimeout(() => {
            console.log("my delay is", ms)
        }, ms)
    })
}

Promise.all([delayedPromise(500), delayedPromise(1000), delayedPromise(300), delayedPromise(1500), delayedPromise(2000)])

// Завдання 2

// "Змагання промісів"

// Ви маєте набір функцій, які повертають проміси з випадковими затримками. Ваше завдання — виконати всі проміси одночасно за допомогою Promise.race і отримати результат найшвидшого проміса.

// Створіть функцію randomDelay, яка приймає значення і повертає проміс з випадковою затримкою (від 1000 до 5000 мілісекунд).
// Створіть масив з 5 промісів, використовуючи функцію randomDelay, із різними значеннями.
// Використайте Promise.race, щоб виконати всі проміси з масиву і отримати результат найшвидшого проміса.
// Обробіть результат найшвидшого проміса та виведіть його у консоль.

const randomDelay = (min, max) => {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

Promise.race([delayedPromise(randomDelay(1000, 5000)), delayedPromise(randomDelay(1000, 5000)), delayedPromise(randomDelay(1000, 5000)), delayedPromise(randomDelay(1000, 5000)), delayedPromise(randomDelay(1000, 5000))])